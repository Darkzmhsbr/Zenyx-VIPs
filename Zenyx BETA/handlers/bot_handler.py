#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Handlers para gerenciamento de bots dos usu√°rios
"""

import os
import logging
import re
import json
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext

# Importa√ß√µes de conex√£o com DB
from main import get_mysql_connection, get_redis_connection

# Configura√ß√£o de logging
logger = logging.getLogger(__name__)

def verificar_token_bot(update: Update, context: CallbackContext) -> None:
    """Verifica se o texto enviado √© um token de bot v√°lido."""
    if not context.user_data.get('waiting_for') == 'bot_token':
        return
    
    message = update.message
    text = message.text
    user_id = update.effective_user.id
    
    # Limpar o estado de espera
    context.user_data.pop('waiting_for', None)
    
    # Verificar formato do token
    token_pattern = r'^\d+:[A-Za-z0-9_-]{35}$'
    if not re.match(token_pattern, text):
        message.reply_text(
            "‚ùå Token inv√°lido! O formato deve ser semelhante a:\n"
            "123456789:ABCDefGhIJKlmNoPQRsTUVwxyZ\n\n"
            "Por favor, obtenha um token v√°lido do @BotFather e tente novamente."
        )
        return
    
    # Enviar mensagem de processamento
    processing_message = message.reply_text(
        "üîÑ INICIANDO SEU BOT...\n"
        "Seu bot est√° sendo iniciado. Isso pode levar alguns segundos."
    )
    
    # Aqui seria feita a verifica√ß√£o real do token e a cria√ß√£o do bot
    # Para este exemplo, vamos simular um atraso e sucesso
    
    try:
        # Simular verifica√ß√£o do token no BotFather
        # Na implementa√ß√£o real, voc√™ verificaria com a API do Telegram
        # e salvaria as informa√ß√µes no banco de dados
        
        # Obter username do bot (simula√ß√£o)
        bot_username = "SeuBot"  # Na realidade, seria obtido da API
        
        # Salvar no banco de dados (simula√ß√£o)
        # Na implementa√ß√£o real, salvar no MySQL
        
        # Preparar mensagem de sucesso
        success_text = (
            f"‚úÖ BOT INICIADO COM SUCESSO!\n"
            f"Seu bot @{bot_username} est√° online e pronto para uso."
        )
        
        # Preparar bot√£o para iniciar o bot
        keyboard = [
            [InlineKeyboardButton(f"üöÄ Iniciar @{bot_username}", url=f"https://t.me/{bot_username}")],
            [InlineKeyboardButton("üìù Configurar bot", callback_data="config_bot")],
            [InlineKeyboardButton("üîô Voltar ao menu", callback_data="menu_principal")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Atualizar a mensagem de processamento
        processing_message.edit_text(
            text=success_text,
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Erro ao criar bot para usu√°rio {user_id}: {e}")
        processing_message.edit_text(
            "‚ùå Ocorreu um erro ao iniciar seu bot. Por favor, verifique se o token √© v√°lido e tente novamente."
        )

def iniciar_bot_usuario(update: Update, context: CallbackContext) -> None:
    """Manipula o callback quando o usu√°rio acessa seu pr√≥prio bot."""
    query = update.callback_query
    query.answer()
    
    user = update.effective_user
    bot_username = context.user_data.get('bot_username', 'SeuBot')  # Valor padr√£o para simula√ß√£o
    
    message_text = (
        f"üëãüèª Ol√° @{user.username}, voc√™ √© o administrador do @{bot_username}"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìù Configurar mensagens", callback_data="config_mensagens")],
        [InlineKeyboardButton("üí∞ Integrar PushinPay", callback_data="config_pushinpay")],
        [InlineKeyboardButton("üë• Configurar canal/grupo", callback_data="config_canal")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )

def configurar_mensagens(update: Update, context: CallbackContext) -> None:
    """Exibe as op√ß√µes de configura√ß√£o de mensagens do bot."""
    query = update.callback_query
    query.answer()
    
    message_text = (
        "üìù CONFIGURA√á√ÉO PRINCIPAL\n"
        "Escolha o que deseja configurar:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üñºÔ∏è M√≠dia", callback_data="config_midia")],
        [InlineKeyboardButton("üìù Texto", callback_data="config_texto")],
        [InlineKeyboardButton("üí∞ Criar Planos", callback_data="config_planos")],
        [InlineKeyboardButton("üëÅÔ∏è Visualiza√ß√£o completa", callback_data="visualizacao_completa")],
        [InlineKeyboardButton("üîô Voltar", callback_data="menu_bot")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )

def configurar_midia(update: Update, context: CallbackContext) -> None:
    """Configura a m√≠dia para a mensagem de boas-vindas do bot."""
    query = update.callback_query
    query.answer()
    
    message_text = (
        "üñºÔ∏è CONFIGURA√á√ÉO DE M√çDIA\n\n"
        "Envie uma foto ou v√≠deo para ser usado como m√≠dia de boas-vindas do seu bot.\n\n"
        "A m√≠dia ser√° exibida na mensagem inicial que os usu√°rios receber√£o ao iniciarem seu bot."
    )
    
    keyboard = [
        [InlineKeyboardButton("üóëÔ∏è Remover m√≠dia atual", callback_data="remover_midia")],
        [InlineKeyboardButton("üîô Voltar", callback_data="config_mensagens")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )
    
    # Definir o estado para aguardar upload de m√≠dia
    context.user_data['waiting_for'] = 'media_upload'

def configurar_texto(update: Update, context: CallbackContext) -> None:
    """Configura o texto de boas-vindas do bot."""
    query = update.callback_query
    query.answer()
    
    # Obter texto atual (simula√ß√£o)
    current_text = context.user_data.get('welcome_text', "üëãüèª Ol√° %firstname%, seja bem-vindo!")
    
    message_text = (
        "üìù CONFIGURA√á√ÉO DE TEXTO\n\n"
        "Envie o texto que ser√° exibido na mensagem de boas-vindas do seu bot.\n\n"
        "Voc√™ pode usar as seguintes vari√°veis:\n"
        "‚Ä¢ %firstname% - Primeiro nome do usu√°rio\n"
        "‚Ä¢ %lastname% - Sobrenome do usu√°rio\n"
        "‚Ä¢ %username% - Nome de usu√°rio (@username)\n\n"
        f"Texto atual:\n{current_text}"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîô Voltar", callback_data="config_mensagens")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )
    
    # Definir o estado para aguardar novo texto
    context.user_data['waiting_for'] = 'welcome_text'

def configurar_planos(update: Update, context: CallbackContext) -> None:
    """Configura os planos de pagamento do bot."""
    query = update.callback_query
    query.answer()
    
    # Obter planos atuais (simula√ß√£o)
    # Na implementa√ß√£o real, buscar do banco de dados
    planos = context.user_data.get('planos', [])
    
    if not planos:
        message_text = (
            "üí∞ CONFIGURA√á√ÉO DE PLANOS\n\n"
            "Nenhum plano configurado."
        )
    else:
        message_text = (
            "üí∞ CONFIGURA√á√ÉO DE PLANOS\n\n"
            "Planos configurados:\n"
        )
        
        for i, plano in enumerate(planos, 1):
            message_text += f"{i}. {plano['nome']} - R$ {plano['preco']:.2f} - {plano['duracao']} dias\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï Adicionar Plano", callback_data="adicionar_plano")],
        [InlineKeyboardButton("üîô Voltar", callback_data="config_mensagens")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )

def adicionar_plano(update: Update, context: CallbackContext) -> None:
    """Inicia o processo de adi√ß√£o de um novo plano."""
    query = update.callback_query
    query.answer()
    
    message_text = (
        "üí∞ ADICIONAR PLANO\n\n"
        "Envie o nome do plano (ex: Mensal, Vital√≠cio, etc.):"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîô Cancelar", callback_data="config_planos")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )
    
    # Definir o estado para aguardar nome do plano
    context.user_data['waiting_for'] = 'plan_name'
    context.user_data['new_plan'] = {}

def processar_nome_plano(update: Update, context: CallbackContext) -> None:
    """Processa o nome do plano enviado pelo usu√°rio."""
    if context.user_data.get('waiting_for') != 'plan_name':
        return
    
    message = update.message
    text = message.text
    
    # Salvar nome do plano
    context.user_data['new_plan']['nome'] = text
    
    # Solicitar o pre√ßo
    message.reply_text(
        "üí∞ ADICIONAR PLANO\n\n"
        "Agora, envie o pre√ßo do plano (ex: 19.90):"
    )
    
    # Atualizar estado
    context.user_data['waiting_for'] = 'plan_price'

def processar_preco_plano(update: Update, context: CallbackContext) -> None:
    """Processa o pre√ßo do plano enviado pelo usu√°rio."""
    if context.user_data.get('waiting_for') != 'plan_price':
        return
    
    message = update.message
    text = message.text
    
    try:
        # Converter e validar o pre√ßo
        preco = float(text.replace(',', '.'))
        if preco <= 0:
            raise ValueError("Pre√ßo deve ser maior que zero")
        
        # Salvar pre√ßo do plano
        context.user_data['new_plan']['preco'] = preco
        
        # Solicitar a dura√ß√£o
        keyboard = [
            [
                InlineKeyboardButton("1 Dia", callback_data="plan_duration_1"),
                InlineKeyboardButton("7 Dias", callback_data="plan_duration_7"),
                InlineKeyboardButton("15 Dias", callback_data="plan_duration_15")
            ],
            [
                InlineKeyboardButton("30 Dias", callback_data="plan_duration_30"),
                InlineKeyboardButton("3 Meses", callback_data="plan_duration_90"),
                InlineKeyboardButton("6 Meses", callback_data="plan_duration_180")
            ],
            [
                InlineKeyboardButton("1 Ano", callback_data="plan_duration_365"),
                InlineKeyboardButton("Vital√≠cio", callback_data="plan_duration_9999")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message.reply_text(
            "üí∞ ADICIONAR PLANO\n\n"
            "Por fim, escolha a dura√ß√£o do plano:",
            reply_markup=reply_markup
        )
        
        # Atualizar estado
        context.user_data['waiting_for'] = 'plan_duration'
        
    except ValueError:
        message.reply_text(
            "‚ùå Pre√ßo inv√°lido! Por favor, envie um valor num√©rico v√°lido (ex: 19.90):"
        )

def processar_duracao_plano(update: Update, context: CallbackContext) -> None:
    """Processa a dura√ß√£o do plano selecionada pelo usu√°rio."""
    query = update.callback_query
    query.answer()
    
    if not query.data.startswith("plan_duration_"):
        return
    
    # Extrair dura√ß√£o da callback data
    duracao = int(query.data.split("_")[-1])
    
    # Salvar dura√ß√£o do plano
    context.user_data['new_plan']['duracao'] = duracao
    
    # Obter dados do novo plano
    new_plan = context.user_data['new_plan']
    nome = new_plan['nome']
    preco = new_plan['preco']
    
    # Texto da dura√ß√£o para exibi√ß√£o
    duracao_texto = "vital√≠cio" if duracao == 9999 else f"{duracao} dias"
    
    # Adicionar plano √† lista (simula√ß√£o)
    # Na implementa√ß√£o real, salvar no banco de dados
    if 'planos' not in context.user_data:
        context.user_data['planos'] = []
    
    context.user_data['planos'].append(new_plan)
    
    # Exibir mensagem de sucesso
    message_text = (
        "‚úÖ PLANO ADICIONADO!\n\n"
        f"‚Ä¢ Nome: {nome}\n"
        f"‚Ä¢ Pre√ßo: R$ {preco:.2f}\n"
        f"‚Ä¢ Dura√ß√£o: {duracao_texto}"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚ûï Adicionar outro plano", callback_data="adicionar_plano")],
        [InlineKeyboardButton("üîô Voltar", callback_data="config_planos")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )
    
    # Limpar dados tempor√°rios
    context.user_data.pop('waiting_for', None)
    context.user_data.pop('new_plan', None)

def configurar_canal(update: Update, context: CallbackContext) -> None:
    """Configura o canal ou grupo para o bot."""
    query = update.callback_query
    query.answer()
    
    message_text = (
        "üë• CONFIGURA√á√ÉO DE GRUPO/CANAL\n\n"
        "Para vincular seu bot a um grupo ou canal, siga os passos:\n\n"
        "1. Adicione seu bot ao grupo/canal como administrador\n"
        "2. Conceda permiss√µes para gerenciar membros\n"
        "3. Clique em ‚ûï Adicionar canal/grupo\n"
        "4. Envie o c√≥digo gerado no seu grupo/canal"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚ûï Adicionar canal/grupo", callback_data="gerar_codigo_canal")],
        [InlineKeyboardButton("üîô Voltar", callback_data="menu_bot")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )

def gerar_codigo_canal(update: Update, context: CallbackContext) -> None:
    """Gera um c√≥digo de valida√ß√£o para vincular um canal ou grupo."""
    query = update.callback_query
    query.answer()
    
    user_id = update.effective_user.id
    
    # Gerar c√≥digo aleat√≥rio
    from handlers.channel_handler import gerar_codigo_validacao
    codigo = gerar_codigo_validacao()
    
    # Armazenar c√≥digo temporariamente (na implementa√ß√£o real, usar Redis)
    if not hasattr(context.bot_data, 'codigos_validacao'):
        context.bot_data['codigos_validacao'] = {}
    
    # Salvar informa√ß√µes do c√≥digo com validade de 1 hora
    context.bot_data['codigos_validacao'][codigo] = {
        'user_id': user_id,
        'bot_id': context.user_data.get('bot_id', 0),  # Simula√ß√£o
        'expira': time.time() + 3600  # 1 hora
    }
    
    message_text = (
        "üë• C√ìDIGO DE VALIDA√á√ÉO GERADO\n\n"
        f"C√≥digo gerado: {codigo}\n"
        "Validade: 1 hora\n\n"
        "Basta enviar esse c√≥digo no grupo/canal que deseja vincular"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîô Voltar", callback_data="config_canal")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )