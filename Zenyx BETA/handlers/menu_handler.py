#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Handlers para o menu principal do Bot Zenyx
"""

import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext

# Configura√ß√£o de logging
logger = logging.getLogger(__name__)

def menu_callback(update: Update, context: CallbackContext) -> None:
    """Handler para exibir o menu principal."""
    query = update.callback_query
    query.answer()
    
    message_text = (
        "üî• BOT CRIADOR DE BOTS üî•\n\n"
        "Este bot permite que voc√™ crie seu pr√≥prio bot para gerenciar grupos VIP "
        "com sistema de pagamento integrado."
    )
    
    keyboard = [
        [InlineKeyboardButton("ü§ñ Criar seu Bot", callback_data="criar_bot")],
        [InlineKeyboardButton("üí∞ Meu Saldo", callback_data="meu_saldo")],
        [InlineKeyboardButton("üë• Convide e Ganhe", callback_data="convite")],
        [InlineKeyboardButton("üëë Seja Admin VIP", callback_data="admin_vip")],
        [InlineKeyboardButton("‚ÑπÔ∏è Como Funciona", callback_data="como_funciona")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )

def criar_bot_callback(update: Update, context: CallbackContext) -> None:
    """Handler para a op√ß√£o 'Criar seu Bot'."""
    query = update.callback_query
    query.answer()
    
    message_text = (
        "ü§ñ CRIAR SEU BOT\n\n"
        "Instru√ß√µes detalhadas:\n\n"
        "1. Acesse o @BotFather e envie o comando /newbot\n"
        "2. Siga o passo a passo e escolha nome/username para seu bot\n"
        "3. Copie o token fornecido pelo BotFather\n"
        "4. Volte neste chat e cole o token aqui\n\n"
        "Exemplo de token:\n"
        "123456789:ABCDefGhIJKlmNoPQRsTUVwxyZ"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )
    
    # Definir o estado do usu√°rio para aguardar o token
    context.user_data['waiting_for'] = 'bot_token'

def meu_saldo_callback(update: Update, context: CallbackContext) -> None:
    """Handler para a op√ß√£o 'Meu Saldo'."""
    query = update.callback_query
    query.answer()
    
    # Aqui deveria buscar o saldo real do usu√°rio no banco de dados
    saldo_atual = 0.00
    
    message_text = (
        "üí∞ SEU SALDO\n\n"
        f"‚Ä¢ Saldo atual: R$ {saldo_atual:.2f}\n"
        "‚Ä¢ Para saque: m√≠nimo de R$ 30.00\n"
        "‚Ä¢ Intervalo entre saques: 24 horas"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )

def convite_callback(update: Update, context: CallbackContext) -> None:
    """Handler para a op√ß√£o 'Convide e Ganhe'."""
    query = update.callback_query
    query.answer()
    
    # Aqui deveria buscar os dados reais do usu√°rio no banco de dados
    user_id = update.effective_user.id
    indicados = 0
    ganhos_totais = 0.00
    link_indicacao = f"https://t.me/GestorPaybot?start=ref_{user_id}"
    
    message_text = (
        "üë• CONVIDE E GANHE\n\n"
        "Ganho m√≠nimo garantido: R$ 125,00 em 15 dias\n"
        "Fontes de monetiza√ß√£o:\n"
        "‚Ä¢ Rendimentos passivos com saldo\n"
        "‚Ä¢ An√∫ncios pagos no sistema\n"
        "‚Ä¢ Programa de afiliados da PushinPay (60% do lucro)\n\n"
        "Regras para receber:\n"
        "‚Ä¢ O indicado precisa realizar no m√≠nimo 3 vendas de R$ 9.90 em 15 dias\n"
        "‚Ä¢ O v√≠nculo √© tempor√°rio: ap√≥s 15 dias o indicado \"desvincula\" de quem o convidou\n\n"
        "Estat√≠sticas do usu√°rio:\n"
        f"‚Ä¢ Indicados: {indicados}\n"
        f"‚Ä¢ Ganhos totais: R$ {ganhos_totais:.2f}\n"
        f"‚Ä¢ Link de indica√ß√£o:\n{link_indicacao}"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )

def admin_vip_callback(update: Update, context: CallbackContext) -> None:
    """Handler para a op√ß√£o 'Seja Admin VIP'."""
    query = update.callback_query
    query.answer()
    
    message_text = (
        "üëë SEJA ADMIN VIP\n\n"
        "Benef√≠cios como Admin VIP:\n"
        "‚Ä¢ Comiss√µes vital√≠cias sobre vendas de bots\n"
        "‚Ä¢ Rendimentos autom√°ticos todos os dias\n"
        "‚Ä¢ Comiss√µes sobre vendas e rendimento de indicados\n"
        "‚Ä¢ Participa√ß√£o nos lucros com an√∫ncios\n\n"
        "Per√≠odo gratuito: 30 dias\n"
        "Ap√≥s isso: R$ 97,90/m√™s"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîì Ativar m√™s gratuito", callback_data="ativar_vip")],
        [InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )

def como_funciona_callback(update: Update, context: CallbackContext) -> None:
    """Handler para a op√ß√£o 'Como Funciona'."""
    query = update.callback_query
    query.answer()
    
    message_text = (
        "‚ÑπÔ∏è COMO FUNCIONA\n\n"
        "O Bot Zenyx √© uma plataforma que permite voc√™ criar seu pr√≥prio bot "
        "para gerenciar grupos e canais pagos no Telegram. Veja como funciona:\n\n"
        "1. Crie seu bot utilizando o @BotFather\n"
        "2. Configure-o aqui com nossas ferramentas\n"
        "3. Adicione seu bot ao seu grupo ou canal\n"
        "4. Configure os planos de pagamento\n"
        "5. Divulgue seu conte√∫do exclusivo\n\n"
        "O sistema gerencia automaticamente:\n"
        "‚Ä¢ Pagamentos via PIX\n"
        "‚Ä¢ Acessos dos usu√°rios\n"
        "‚Ä¢ Renova√ß√µes de assinaturas\n"
        "‚Ä¢ Comiss√µes e indica√ß√µes"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup
    )